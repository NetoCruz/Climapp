{"version":3,"sources":["components/WeatherInfo.js","components/WeatherForm.js","components/Navbar.js","components/animation.js","App.js","serviceWorker.js","index.js","keys.js","logo.svg"],"names":["WeatherInfo","props","react_default","a","createElement","error","className","temperature","city","country","description","humidity","wind_speed","WeatherForm","onSubmit","getWeather","type","name","placeholder","autoFocus","Navbar","class","Animation","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","dist_default","options","height","width","Component","App","state","_callee","e","_e$target$elements","cityValue","countryValue","API_URL","response","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","console","log","concat","WEATHER_KEY","fetch","sent","json","_this","setState","main","temp","weather","wind","speed","sys","stop","components_Navbar","animation","components_WeatherForm","this","components_WeatherInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6f6ba313.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction WeatherInfo(props) {\r\n  return (\r\n    <div>\r\n      {props.error && (\r\n        <div className=\"alert alert-danger\">\r\n          <p>{props.error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {props.temperature ? (\r\n        <div className=\"card card-body mt-2 animated fadeInUp\">\r\n          {props.city && props.country && (\r\n            <p>\r\n              <i className=\"fas fa-location-arrow\" /> Location: {props.city},{\" \"}\r\n              {props.country}\r\n            </p>\r\n          )}\r\n          {props.temperature && (\r\n            <p>\r\n              <i className=\"fas fa-temperature-low\" /> Temperature:{\" \"}\r\n              {props.temperature} â„ƒ, {props.description}\r\n            </p>\r\n          )}\r\n          {props.humidity && (\r\n            <p>\r\n              <i className=\"fas fa-water\" /> Humidity: {props.humidity}%\r\n            </p>\r\n          )}\r\n          {props.wind_speed && (\r\n            <p>\r\n              <i className=\"fas fa-wind\" /> Wind Speed: {props.wind_speed}km/h\r\n            </p>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"card card-body mt-2 text-center\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherInfo;\r\n","import React from \"react\";\r\n\r\nfunction WeatherForm(props) {\r\n  return (\r\n    <div className=\"card card-body\">\r\n      <form onSubmit={props.getWeather}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"city\"\r\n            placeholder=\"Your city name\"\r\n            autoFocus\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-group\">\r\n          <input\r\n            className=\"form-control\"\r\n            type=\"text\"\r\n            name=\"country\"\r\n            placeholder=\"Your country name\"\r\n            autoFocus\r\n          />\r\n        </div>\r\n        <button className=\"btn btn-success btn-block\">Get Weather</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherForm;\r\n","import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <div>\r\n      <nav class=\"navbar navbar-dark bg-primary\">\r\n        <span class=\"navbar-brand mb-0 h1\">CLIMAPP</span>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../images/sun.json\";\r\nimport { NONAME } from \"dns\";\r\n\r\nclass Animation extends Component {\r\n  render() {\r\n    const defaultOptions = {\r\n      loop: false,\r\n      autoplay: true,\r\n\r\n      animationData: animationData,\r\n      rendererSettings: {\r\n        preserveAspectRatio: \"xMidYMid slice\"\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Lottie options={defaultOptions} height={150} width={150} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Animation;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WeatherInfo from \"./components/WeatherInfo\";\nimport WeatherForm from \"./components/WeatherForm\";\nimport { WEATHER_KEY } from \"./keys\";\nimport Navbar from \"./components/Navbar\";\nimport Animation from \"./components/animation\";\n\nclass App extends Component {\n  state = {\n    temperature: \"\",\n    description: \"\",\n    humidity: \"\",\n    wind_speed: 0,\n    city: \"\",\n    country: \"\",\n    error: null\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const { city, country } = e.target.elements;\n    const cityValue = city.value;\n    const countryValue = country.value;\n    console.log(cityValue, countryValue);\n\n    if (cityValue && countryValue) {\n      // metric parameter is for Celcius Unit\n      const API_URL = `https://api.openweathermap.org/data/2.5/weather?q=${cityValue},${countryValue}&appid=${WEATHER_KEY}&units=metric&lang=es`;\n      const response = await fetch(API_URL);\n      const data = await response.json();\n      console.log(data);\n\n      this.setState({\n        temperature: data.main.temp,\n        description: data.weather[0].description,\n        humidity: data.main.humidity,\n        wind_speed: data.wind.speed,\n        city: data.name,\n        country: data.sys.country,\n        error: null\n      });\n    } else {\n      this.setState({\n        error: \"Please enter a City and a Country.\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Animation />\n\n        <div className=\"container p-4\">\n          <div className=\"row\">\n            <div className=\"col-md-6 mx-auto\">\n              <WeatherForm getWeather={this.getWeather} />\n              <WeatherInfo {...this.state} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\r\n  WEATHER_KEY: `ea56e9ba053da5fa17e4754b7640bac1`\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}